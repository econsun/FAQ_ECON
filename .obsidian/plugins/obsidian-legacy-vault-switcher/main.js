/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  restoreVaultSwitcher: true,
  restoreVaultActionsHelp: true,
  restoreVaultActionsSettings: true
};
var MyPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.ribbonMap = /* @__PURE__ */ new Map();
    this.styleElements = {};
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new MyPluginSettingTab(this.app, this));
    this.initVaultSwitcher();
    this.updateRibbonButtons();
  }
  onunload() {
    this.ribbonMap.forEach((value, key) => {
      value.detach();
    });
    this.ribbonMap.clear();
    Object.values(this.styleElements).forEach((el) => el.remove());
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  initVaultSwitcher() {
    this.createRibbonButton("vault", "Switch vault", "vault", () => this.app.openVaultChooser());
    this.createRibbonButton("help", "Help", "help", () => this.app.openHelp());
    this.createRibbonButton("settings", "Settings", "lucide-settings", () => this.app.setting.open());
  }
  createRibbonButton(id, tooltip, icon, onClick) {
    const leftRibbon = this.app.workspace.leftRibbon;
    const button = leftRibbon.makeRibbonItemButton(icon, tooltip, (e) => {
      e.stopPropagation();
      onClick();
    });
    this.ribbonMap.set(id, button);
    leftRibbon.ribbonSettingEl.appendChild(button);
  }
  toggleRibbonItem(id, show) {
    const item = this.ribbonMap.get(id);
    if (item) {
      if (show) {
        this.app.workspace.leftRibbon.ribbonSettingEl.appendChild(item);
      } else {
        item.detach();
      }
    }
  }
  updateRibbonButtons() {
    this.toggleRibbonItem("vault", this.settings.restoreVaultSwitcher);
    this.toggleRibbonItem("help", this.settings.restoreVaultActionsHelp);
    this.toggleRibbonItem("settings", this.settings.restoreVaultActionsSettings);
    this.applyStyleSettings();
  }
  applyStyleSettings() {
    this.updateStyle("vault-profile", `
			body:not(.is-mobile) .workspace-split.mod-left-split .workspace-sidedock-vault-profile {
				display: ${this.settings.restoreVaultSwitcher && this.settings.restoreVaultActionsHelp && this.settings.restoreVaultActionsSettings ? "none" : "flex"};
			}
		`);
    this.updateStyle("vault-switcher", `
			body:not(.is-mobile) .workspace-split.mod-left-split .workspace-sidedock-vault-profile .workspace-drawer-vault-switcher {
				display: ${this.settings.restoreVaultSwitcher ? "none" : "flex"};
			}
		`);
    this.updateStyle("vault-actions-help", `
			body:not(.is-mobile) .workspace-split.mod-left-split .workspace-sidedock-vault-profile .workspace-drawer-vault-actions .clickable-icon:has(svg.svg-icon.help) {
				display: ${this.settings.restoreVaultActionsHelp ? "none" : "flex"};
			}
		`);
    this.updateStyle("vault-actions-settings", `
			body:not(.is-mobile) .workspace-split.mod-left-split .workspace-sidedock-vault-profile .workspace-drawer-vault-actions .clickable-icon:has(svg.svg-icon.lucide-settings) {
				display: ${this.settings.restoreVaultActionsSettings ? "none" : "flex"};
			}
		`);
  }
  updateStyle(id, css) {
    let styleEl = this.styleElements[id];
    if (!styleEl) {
      styleEl = document.createElement("style");
      styleEl.id = id;
      document.head.appendChild(styleEl);
      this.styleElements[id] = styleEl;
    }
    styleEl.textContent = css;
  }
};
var MyPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h3", { text: "Ribbon Button Settings" });
    this.addToggle("Vault Switcher", "restoreVaultSwitcher", "Show or hide the vault switcher button");
    this.addToggle("Help", "restoreVaultActionsHelp", "Show or hide the help button");
    this.addToggle("Settings", "restoreVaultActionsSettings", "Show or hide the settings button");
  }
  addToggle(name, settingKey, description) {
    new import_obsidian.Setting(this.containerEl).setName(name).setDesc(description).addToggle((toggle) => toggle.setValue(this.plugin.settings[settingKey]).onChange(async (value) => {
      this.plugin.settings[settingKey] = value;
      await this.plugin.saveSettings();
      this.plugin.updateRibbonButtons();
    }));
  }
};
